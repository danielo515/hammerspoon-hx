package hammerspoon;

@:native("hs.alert")
extern class Alert {
  /**
   * Closes all alerts currently open on the screen
   * @param seconds Optional number specifying the fade out duration. Defaults to `fadeOutDuration` value currently defined in the [hs.alert.defaultStyle](#defaultStyle)
   * @return None
   */
  @:luaDotMethod static public function closeAll(seconds:Null< Float >):Void;

  /**
   * Closes the alert with the specified identifier
   * @param uuid    the identifier of the alert to close
   * @param seconds Optional number specifying the fade out duration. Defaults to `fadeOutDuration` value currently defined in the [hs.alert.defaultStyle](#defaultStyle)
   * @return None
   * @notes Use this function to close an alert which is indefinite or close an alert with a long duration early.
   */
  @:luaDotMethod static public function closeSpecific(uuid:String, seconds:Null< Float >):Void;

  /**
   * A table defining the default visual style for the alerts generated by this module.
   */
  static public var defaultStyle:Dynamic;

  /**
   * Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.
   * @param str The string or `hs.styledtext` object to display in the alert
   * @param style an optional table containing one or more of the keys specified in [hs.alert.defaultStyle](#defaultStyle). If `str` is already an `hs.styledtext` object, this argument is ignored.
   * @param screen an optional `hs.screen` userdata object specifying the screen (monitor) to display the alert on. Defaults to `hs.screen.mainScreen()` which corresponds to the screen with the currently focused window.
   * @param seconds The number of seconds to display the alert. Defaults to 2. If seconds is specified and is not a number, displays the alert indefinitely.
   * @return a string identifier for the alert.
   * @notes For convenience, you can call this function as `hs.alert(...)`
   */
  @:luaDotMethod static public function show(str:Dynamic, ?style:Dynamic, ?screen:Dynamic, ?seconds:Null< Float >):String;

  /**
   * Shows an image and a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.
   * @param str The string or `hs.styledtext` object to display in the alert
   * @param image The image to display in the alert
   * @param style an optional table containing one or more of the keys specified in [hs.alert.defaultStyle](#defaultStyle). If `str` is already an `hs.styledtext` object, this argument is ignored.
   * @param screen an optional `hs.screen` userdata object specifying the screen (monitor) to display the alert on. Defaults to `hs.screen.mainScreen()` which corresponds to the screen with the currently focused window.
   * @param seconds The number of seconds to display the alert. Defaults to 2. If seconds is specified and is not a number, displays the alert indefinitely.
   * @return a string identifier for the alert.
   * @notes The optional parameters are parsed in the order presented as follows:
   *        if the argument is a table and `style` has not previously been set, then the table is assigned to `style`
   *        if the argument is a userdata and `screen` has not previously been set, then the userdata is assigned to screen
   * if duration has not been set, then it is assigned the value of the argument
   * if all of these conditions fail for a given argument, then an error is returned
   * The reason for this logic is to support the creation of persistent alerts as was previously handled by the module: If you specify a non-number value for seconds you will need to store the string identifier returned by this function so that you can close it manually with hs.alert.closeSpecific when the alert should be removed.
   * Any style element which is not specified in the style argument table will use the value currently defined in the hs.alert.defaultStyle table.
   */
  @:luaDotMethod static public function showWithImage(
    str:Dynamic,
    image:Dynamic,
    ?style:Dynamic,
    ?screen:Dynamic,
    ?seconds:Null< Float >
  ):String;
}
